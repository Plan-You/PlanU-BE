name: Deploy to EC2

on:
  push:
    branches:
      - main 

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. Java 17 설치 (distribution 추가)
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'  # 또는 'zulu' 사용 가능

      # 2. 코드 체크아웃
      - name: Check out the repository
        uses: actions/checkout@v2

      # 3. gradlew에 실행 권한 추가
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      # 4. JAR 파일 생성
      - name: Build .jar file with Gradle
        run: ./gradlew clean bootJar

      # 5. SSH 설정
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_KEY }}

      # 6. 파일을 EC2로 복사
      - name: Copy files to EC2
        run: |
          scp -o StrictHostKeyChecking=no -r ./* ubuntu@${{ secrets.AWS_EC2_IP }}:/home/ubuntu/projects/planu-backend

      # 7. EC2에서 Docker Compose 실행
      - name: Run Docker Compose on EC2
        run: |
          ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.AWS_EC2_IP }} << 'EOF'
            cd /home/ubuntu/projects/planu-backend
            echo "Copying environment variables..."

            # 기존 .env 파일 삭제
            rm -f .env
            
            # 새로운 환경 변수 설정
            echo "SPRING_DATASOURCE_URL=${{ secrets.SPRING_DATASOURCE_URL }}" > .env
            echo "SPRING_DATASOURCE_USERNAME=${{ secrets.SPRING_DATASOURCE_USERNAME }}" >> .env
            echo "SPRING_DATASOURCE_PASSWORD=${{ secrets.SPRING_DATASOURCE_PASSWORD }}" >> .env
            echo "REDIS_HOST=${{ secrets.REDIS_HOST }}" >> .env
            echo "REDIS_PORT=${{ secrets.REDIS_PORT }}" >> .env
            echo "MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}" >> .env
            echo "MYSQL_DATABASE=${{ secrets.MYSQL_DATABASE }}" >> .env
            echo "GOOGLE_EMAIL=${{ secrets.GOOGLE_EMAIL }}" >> .env
            echo "GMAIL_APP_PASSWORD=${{ secrets.GMAIL_APP_PASSWORD }}" >> .env
            echo "SPRING_JWT_SECRET=${{ secrets.SPRING_JWT_SECRET }}" >> .env
            echo "aws.credentials.access-key=${{ secrets.AWS_ACCESS_KEY_ID }}" >> .env
            echo "aws.credentials.secret-key=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> .env
            echo "KAKAO_ID=${{ secrets.KAKAO_ID }}" >> .env
            echo "KAKAO_SECRET=${{ secrets.KAKAO_SECRET }}" >> .env
      
            echo "Environment variables set successfully."
      
            # Docker Compose 실행
            # 기존 컨테이너 강제 종료 및 삭제
            docker-compose down --remove-orphans
            docker stop $(docker ps -aq) || true
            docker rm $(docker ps -aq) || true
      
            docker-compose up -d --build
          EOF

