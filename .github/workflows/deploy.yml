#name: Deploy to EC2
#
#on:
#  push:
#    branches:
#      - main
#
#jobs:
#  deploy:
#    runs-on: ubuntu-latest
#
#    steps:
#      # 1. Java 17 설치 (distribution 추가)
#      - name: Set up JDK 17
#        uses: actions/setup-java@v3
#        with:
#          java-version: '17'
#          distribution: 'temurin'
#
#      # 2. 코드 체크아웃
#      - name: Check out the repository
#        uses: actions/checkout@v2
#
#      # 3. gradlew에 실행 권한 추가
#      - name: Grant execute permission for gradlew
#        run: chmod +x ./gradlew
#
#      # 4. JAR 파일 생성
#      - name: Build .jar file with Gradle
#        run: ./gradlew clean bootJar
#
#      # 5. SSH 설정
#      - name: Set up SSH
#        uses: webfactory/ssh-agent@v0.5.3
#        with:
#          ssh-private-key: ${{ secrets.SSH_KEY }}
#
#      # 6. 파일을 EC2로 복사
#      - name: Copy files to EC2
#        run: |
#          scp -o StrictHostKeyChecking=no -r ./* ubuntu@${{ secrets.AWS_EC2_IP }}:/home/ubuntu/projects/planu-backend
#
#      # 7. EC2에서 Docker Compose 실행
#      - name: Run Docker Compose on EC2
#        run: |
#          ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.AWS_EC2_IP }} << 'EOF'
#            cd /home/ubuntu/projects/planu-backend
#            echo "Copying environment variables..."
#
#            # 기존 .env 파일 삭제
#            rm -f .env
#
#            # 새로운 환경 변수 설정
#            echo "SPRING_DATASOURCE_URL=${{ secrets.SPRING_DATASOURCE_URL }}" > .env
#            echo "SPRING_DATASOURCE_USERNAME=${{ secrets.SPRING_DATASOURCE_USERNAME }}" >> .env
#            echo "SPRING_DATASOURCE_PASSWORD=${{ secrets.SPRING_DATASOURCE_PASSWORD }}" >> .env
#            echo "REDIS_HOST=${{ secrets.REDIS_HOST }}" >> .env
#            echo "REDIS_PORT=${{ secrets.REDIS_PORT }}" >> .env
#            echo "MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}" >> .env
#            echo "MYSQL_DATABASE=${{ secrets.MYSQL_DATABASE }}" >> .env
#            echo "GOOGLE_EMAIL=${{ secrets.GOOGLE_EMAIL }}" >> .env
#            echo "GMAIL_APP_PASSWORD=${{ secrets.GMAIL_APP_PASSWORD }}" >> .env
#            echo "SPRING_JWT_SECRET=${{ secrets.SPRING_JWT_SECRET }}" >> .env
#            echo "aws.credentials.access-key=${{ secrets.AWS_ACCESS_KEY_ID }}" >> .env
#            echo "aws.credentials.secret-key=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> .env
#            echo "KAKAO_ID=${{ secrets.KAKAO_ID }}" >> .env
#            echo "KAKAO_SECRET=${{ secrets.KAKAO_SECRET }}" >> .env
#
#            echo "Environment variables set successfully."
#
#            # Docker Compose 실행
#            # 기존 컨테이너 강제 종료 및 삭제
#            docker-compose down --remove-orphans
#            docker stop $(docker ps -aq) || true
#            docker rm $(docker ps -aq) || true
#
#            docker-compose up -d --build
#          EOF

name: Deploy to EC2 (Blue-Green)

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/planu-backend:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/planu-backend:latest

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_KEY }}

      - name: Blue-Green Deployment on EC2
        run: |
          ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.AWS_EC2_IP }} << 'EOF'
            set -e
            cd /home/ubuntu/projects/planu-backend

            echo "Setting environment variables..."
            cat > .env <<ENV
          SPRING_DATASOURCE_URL=${{ secrets.SPRING_DATASOURCE_URL }}
          SPRING_DATASOURCE_USERNAME=${{ secrets.SPRING_DATASOURCE_USERNAME }}
          SPRING_DATASOURCE_PASSWORD=${{ secrets.SPRING_DATASOURCE_PASSWORD }}
          REDIS_HOST=${{ secrets.REDIS_HOST }}
          REDIS_PORT=${{ secrets.REDIS_PORT }}
          MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}
          MYSQL_DATABASE=${{ secrets.MYSQL_DATABASE }}
          GOOGLE_EMAIL=${{ secrets.GOOGLE_EMAIL }}
          GMAIL_APP_PASSWORD=${{ secrets.GMAIL_APP_PASSWORD }}
          SPRING_JWT_SECRET=${{ secrets.SPRING_JWT_SECRET }}
          aws.credentials.access-key=${{ secrets.AWS_ACCESS_KEY_ID }}
          aws.credentials.secret-key=${{ secrets.AWS_SECRET_ACCESS_KEY }}
          KAKAO_ID=${{ secrets.KAKAO_ID }}
          KAKAO_SECRET=${{ secrets.KAKAO_SECRET }}
          ENV
  
          echo "Determining currently active environment..."
  
          CURRENT_ENV=""
          if docker ps | grep planu-app-blue; then
          CURRENT_ENV="blue"
          elif docker ps | grep planu-app-green; then
          CURRENT_ENV="green"
          else
          echo "No active environment. Defaulting to blue."
          CURRENT_ENV="green"
          fi
  
          if [ "$CURRENT_ENV" = "blue" ]; then
          TARGET_ENV="green"
          COMPOSE_FILE="docker-compose.green.yml"
          CONTAINER_NAME="planu-app-green"
          NGINX_UPSTREAM="app-green"
          else
          TARGET_ENV="blue"
          COMPOSE_FILE="docker-compose.blue.yml"
          CONTAINER_NAME="planu-app-blue"
          NGINX_UPSTREAM="app-blue"
          fi
  
          echo "Deploying to $TARGET_ENV..."
          
          docker pull ${{ secrets.DOCKER_USERNAME }}/planu-backend:latest
          
          docker-compose -f $COMPOSE_FILE down
          docker-compose -f $COMPOSE_FILE up -d
  
          echo "Waiting for container to initialize..."
          sleep 10
          
          echo "Updating Nginx upstream to $NGINX_UPSTREAM..."
          cat > nginx-upstream.conf <<EOL
          upstream backend {
          server ${NGINX_UPSTREAM}:8080;
          }
          EOL
  
          docker cp nginx-upstream.conf nginx:/etc/nginx/conf.d/upstream.conf
          docker exec nginx nginx -s reload
    
          echo "✅ Blue-Green deployment complete."
          EOF