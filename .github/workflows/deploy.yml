name: Deploy to EC2 (Blue-Green)

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/planu-app:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/planu-app:latest

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_KEY }}

      - name: Blue-Green Deployment on EC2
        run: |
          ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.AWS_EC2_IP }} << EOF
          set -e
          cd /home/ubuntu/projects/planu-backend
              
                echo "Setting environment variables..."
                cat > .env <<ENV
                SPRING_DATASOURCE_URL=${{ secrets.SPRING_DATASOURCE_URL }}
                SPRING_DATASOURCE_USERNAME=${{ secrets.SPRING_DATASOURCE_USERNAME }}
                SPRING_DATASOURCE_PASSWORD=${{ secrets.SPRING_DATASOURCE_PASSWORD }}
                REDIS_HOST=${{ secrets.REDIS_HOST }}
                REDIS_PORT=${{ secrets.REDIS_PORT }}
                MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}
                MYSQL_DATABASE=${{ secrets.MYSQL_DATABASE }}
                GOOGLE_EMAIL=${{ secrets.GOOGLE_EMAIL }}
                GMAIL_APP_PASSWORD=${{ secrets.GMAIL_APP_PASSWORD }}
                SPRING_JWT_SECRET=${{ secrets.SPRING_JWT_SECRET }}
                aws.credentials.access-key=${{ secrets.AWS_ACCESS_KEY_ID }}
                aws.credentials.secret-key=${{ secrets.AWS_SECRET_ACCESS_KEY }}
                KAKAO_ID=${{ secrets.KAKAO_ID }}
                KAKAO_SECRET=${{ secrets.KAKAO_SECRET }}
          ENV
                
                echo "Ensuring shared services (db, redis) are up..."
                docker-compose -f docker-compose.shared.yml up -d
                
                echo "Determining currently active environment..."
                
                CURRENT_ENV=""
                if docker ps --filter "name=planu-app-blue" --quiet | grep -E .; then
                CURRENT_ENV="blue"
                elif docker ps --filter "name=planu-app-green" --quiet | grep -E .; then
                CURRENT_ENV="green"
                else
                echo "No active environment. Defaulting to blue."
                CURRENT_ENV="green"
                fi
                
                echo "Current environment is \$CURRENT_ENV"
                
                if [ "\$CURRENT_ENV" = "blue" ]; then
                TARGET_ENV="green"
                COMPOSE_FILE="docker-compose.green.yml"
                CONTAINER_NAME="planu-app-green"
                NGINX_UPSTREAM="app-green"
                else
                TARGET_ENV="blue"
                COMPOSE_FILE="docker-compose.blue.yml"
                CONTAINER_NAME="planu-app-blue"
                NGINX_UPSTREAM="app-blue"
                fi
                
                echo "Deploying to \$TARGET_ENV..."
                
                docker pull ${{ secrets.DOCKER_USERNAME }}/planu-app:latest
                
                docker-compose -f \$COMPOSE_FILE up -d
                
                echo "Waiting for container to initialize..."
                sleep 10
                
                echo "Updating Nginx upstream to \$NGINX_UPSTREAM..."
                echo "upstream backend {" > nginx-upstream.conf
                echo "  server \$NGINX_UPSTREAM:8080;" >> nginx-upstream.conf
                echo "}" >> nginx-upstream.conf
                
                docker cp nginx-upstream.conf nginxserver:/etc/nginx/conf.d/upstream.conf
                docker exec nginxserver nginx -s reload
                
                echo "Shutting down previous app container (\$CURRENT_ENV)..."
                docker-compose -f docker-compose.\$CURRENT_ENV.yml down
                
                echo "âœ… Blue-Green deployment complete."
          EOF
