CREATE DATABASE IF NOT EXISTS planu;

CREATE TABLE IF NOT EXISTS `USER`
(
    id            BIGINT AUTO_INCREMENT PRIMARY KEY,
    username      VARCHAR(50)                      NOT NULL,
    password      VARCHAR(255)                     NOT NULL,
    name          VARCHAR(100)                     NOT NULL,
    email         VARCHAR(100)                     NOT NULL,
    role          ENUM ('ROLE_USER', 'ROLE_ADMIN') NOT NULL,
    profileImgUrl VARCHAR(255),
    birthDate     DATE,
    createdAt     TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updatedAt     TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS `FRIEND`
(
    TO_USER_ID    BIGINT,
    FROM_USER_ID  BIGINT,
    FRIEND_STATUS TINYINT(1) DEFAULT NULL,
    CREATED_DATE  TIMESTAMP  DEFAULT CURRENT_TIMESTAMP,
    UPDATED_DATE  TIMESTAMP  DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,

    PRIMARY KEY (TO_USER_ID, FROM_USER_ID),
    CONSTRAINT FK_FRD_TO_USER FOREIGN KEY (TO_USER_ID) REFERENCES USER (ID) ON DELETE CASCADE ON UPDATE CASCADE,
    CONSTRAINT FK_FRD_FROM_USER FOREIGN KEY (FROM_USER_ID) REFERENCES USER (ID) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE IF NOT EXISTS `USER_LOCATION`
(
    USER_ID      BIGINT PRIMARY KEY,
    LATITUDE     DECIMAL(10, 6),
    LONGITUDE    DECIMAL(10, 6),
    CREATED_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,

    CONSTRAINT FK_UL_USER_ID FOREIGN KEY (USER_ID) REFERENCES USER (ID) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE IF NOT EXISTS `NOTIFICATION`
(
    RECEIVER_ID  BIGINT,
    TITLE        VARCHAR(100) NOT NULL,
    MESSAGE      VARCHAR(255),
    NOT_READ     TINYINT(1) DEFAULT 0,
    SOURCE       VARCHAR(255) NOT NULL,
    CREATED_DATE TIMESTAMP  DEFAULT CURRENT_TIMESTAMP,
    UPDATED_DATE TIMESTAMP  DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,

    PRIMARY KEY (RECEIVER_ID),
    CONSTRAINT FK_NTF_RECEIVER_ID FOREIGN KEY (RECEIVER_ID) REFERENCES USER (ID) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE IF NOT EXISTS `SCHEDULE_LOCATION`
(
    ID           BIGINT AUTO_INCREMENT PRIMARY KEY,
    ADDRESS      VARCHAR(255)   NOT NULL,
    PLACE_NAME   VARCHAR(255),
    LATITUDE     DECIMAL(10, 6) NOT NULL,
    LONGITUDE    DECIMAL(10, 6) NOT NULL,
    CREATED_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS `SCHEDULE`
(
    ID             BIGINT AUTO_INCREMENT PRIMARY KEY,
    USER_ID        BIGINT       NOT NULL,
    LOCATION_ID    BIGINT       NOT NULL,
    TITLE          VARCHAR(100) NOT NULL,
    START_DATETIME DATETIME     NOT NULL,
    END_DATETIME   DATETIME     NOT NULL,
    COLOR          VARCHAR(20),
    STATE          TINYINT(1)   NOT NULL DEFAULT 0,
    CREATED_DATE   TIMESTAMP             DEFAULT CURRENT_TIMESTAMP,
    UPDATED_DATE   TIMESTAMP             DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,

    CONSTRAINT FK_SCH_USER_ID FOREIGN KEY (USER_ID) REFERENCES USER (ID) ON DELETE CASCADE ON UPDATE CASCADE,
    CONSTRAINT FK_SCH_LOCATION_ID FOREIGN KEY (LOCATION_ID) REFERENCES SCHEDULE_LOCATION (ID) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE IF NOT EXISTS `AVAILABLE_DATE`
(
    USER_ID      BIGINT,
    DATE         DATE NOT NULL,
    CREATED_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,

    PRIMARY KEY (USER_ID),
    CONSTRAINT FK_AD_USER_ID FOREIGN KEY (USER_ID) REFERENCES USER (ID) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE IF NOT EXISTS `_GROUP`
(
    ID           BIGINT AUTO_INCREMENT PRIMARY KEY,
    NAME         VARCHAR(50)    NOT NULL,
    PROFILE      VARCHAR(255),
    INVITE_CODE  CHAR(6) UNIQUE NOT NULL DEFAULT (UPPER(SUBSTRING(REPLACE(UUID(), '-', ''), 1, 6))),
    CREATED_DATE TIMESTAMP               DEFAULT CURRENT_TIMESTAMP,
    UPDATED_DATE TIMESTAMP               DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP

);

CREATE TABLE IF NOT EXISTS `GROUP_USER`
(
    USER_ID      BIGINT,
    GROUP_ID     BIGINT,
    GROUP_ROLE   ENUM ('LEADER', 'PARTICIPANT'),
    GROUP_STATE  TINYINT(1) DEFAULT NULL,
    CREATED_DATE TIMESTAMP  DEFAULT CURRENT_TIMESTAMP,
    UPDATED_DATE TIMESTAMP  DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,

    PRIMARY KEY (USER_ID, GROUP_ID),
    CONSTRAINT FK_GU_USER_ID FOREIGN KEY (USER_ID) REFERENCES USER (ID) ON DELETE CASCADE ON UPDATE CASCADE,
    CONSTRAINT FK_GU_GROUP_ID FOREIGN KEY (GROUP_ID) REFERENCES _GROUP (ID) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE IF NOT EXISTS `CHAT_MESSAGE`
(
    ID           BIGINT AUTO_INCREMENT PRIMARY KEY,
    USER_ID      BIGINT,
    GROUP_ID     BIGINT,
    NOT_READ     INT(3) UNSIGNED,
    MESSAGE      TEXT,
    CREATED_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,

    CONSTRAINT FK_CM_USER_ID FOREIGN KEY (USER_ID) REFERENCES GROUP_USER (USER_ID) ON DELETE CASCADE ON UPDATE CASCADE,
    CONSTRAINT FK_CM_GROUP_ID FOREIGN KEY (GROUP_ID) REFERENCES GROUP_USER (GROUP_ID) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE IF NOT EXISTS `GROUP_SCHEDULE`
(
    ID           BIGINT AUTO_INCREMENT PRIMARY KEY,
    SCHEDULE_ID  BIGINT,
    GROUP_ID     BIGINT,
    MEMO         VARCHAR(50),
    CREATED_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,

    CONSTRAINT FK_GSCH_SCHEDULE_ID FOREIGN KEY (SCHEDULE_ID) REFERENCES SCHEDULE (ID) ON DELETE CASCADE ON UPDATE CASCADE,
    CONSTRAINT FK_GSCH_GROUP_ID FOREIGN KEY (GROUP_ID) REFERENCES _GROUP (ID) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE IF NOT EXISTS `GROUP_SCHEDULE_PARTICIPANT`
(
    GROUP_SCHEDULE_ID BIGINT,
    USER_ID           BIGINT,
    GROUP_ID          BIGINT,
    CREATED_DATE      TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_DATE      TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,

    PRIMARY KEY (GROUP_SCHEDULE_ID),
    CONSTRAINT FK_GSCHP_GROUP_SCHEDULE_ID FOREIGN KEY (GROUP_SCHEDULE_ID) REFERENCES GROUP_SCHEDULE (ID) ON DELETE CASCADE ON UPDATE CASCADE,
    CONSTRAINT FK_GSCHP_USER_ID FOREIGN KEY (USER_ID) REFERENCES USER (ID) ON DELETE CASCADE ON UPDATE CASCADE,
    CONSTRAINT FK_GSCHP_GROUP_ID FOREIGN KEY (GROUP_ID) REFERENCES _GROUP (ID) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE IF NOT EXISTS `GROUP_SCHEDULE_COMMENT`
(
    GROUP_SCHEDULE_ID BIGINT,
    USER_ID           BIGINT,
    GROUP_ID          BIGINT,
    MESSAGE           TEXT NOT NULL,
    LIKES             INT(10)   DEFAULT 0,
    UNLIKES           INT(10)   DEFAULT 0,
    CREATED_DATE      TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_DATE      TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,

    PRIMARY KEY (GROUP_SCHEDULE_ID),
    CONSTRAINT FK_GSCHEC_GROUP_SCHEDULE_ID FOREIGN KEY (GROUP_SCHEDULE_ID) REFERENCES GROUP_SCHEDULE (ID) ON DELETE CASCADE ON UPDATE CASCADE,
    CONSTRAINT FK_GSCHEC_USER_ID FOREIGN KEY (USER_ID) REFERENCES USER (ID) ON DELETE CASCADE ON UPDATE CASCADE,
    CONSTRAINT FK_GSCHEC_GROUP_ID FOREIGN KEY (GROUP_ID) REFERENCES _GROUP (ID) ON DELETE CASCADE ON UPDATE CASCADE
);

INSERT INTO `USER` (username, password, name, email, role, profileImgUrl, birthDate)
VALUES ('user', 'password', 'name', 'user@example.com', 'ROLE_USER', NULL, '1990-01-01');
