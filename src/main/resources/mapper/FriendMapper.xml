<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.planu.group_meeting.dao.FriendDAO">

    <select id="getFriendStatus" parameterType="long" resultType="com.planu.group_meeting.entity.common.FriendStatus">
        SELECT IFNULL(MAX(FRIEND_STATUS),'NONE') AS friendStatus
        FROM FRIEND
        WHERE FROM_USER_ID=#{fromUserId} AND TO_USER_ID=#{toUserId}
    </select>


    <insert id="requestFriend" parameterType="long">
        INSERT INTO FRIEND(TO_USER_ID, FROM_USER_ID, FRIEND_STATUS)
        VALUES (#{fromUserId}, #{toUserId}, 'RECEIVE'),
        (#{toUserId}, #{fromUserId}, 'REQUEST')
    </insert>

    <update id="acceptFriend" parameterType="long">
        UPDATE FRIEND
        SET FRIEND_STATUS = 'FRIEND'
        WHERE (FROM_USER_ID=#{fromUserId} AND TO_USER_ID=#{toUserId})
        OR (FROM_USER_ID=#{toUserId} AND TO_USER_ID=#{fromUserId})
    </update>

    <delete id="deleteFriend" parameterType="long">
        DELETE FROM FRIEND
        WHERE (FROM_USER_ID=#{fromUserId} AND TO_USER_ID=#{toUserId})
        OR (FROM_USER_ID=#{toUserId} AND TO_USER_ID=#{fromUserId})
    </delete>

    <select id="getFriendsInfo" parameterType="Map" resultType="com.planu.group_meeting.dto.FriendDto$FriendInfo">
        SELECT
        u.ID AS userId,
        u.NAME AS name,
        u.USERNAME AS username,
        u.PROFILE_IMG_URL AS profileImageUrl
        FROM FRIEND f
        JOIN USER u ON f.TO_USER_ID = u.ID
        WHERE f.FROM_USER_ID = #{userId}
        AND f.FRIEND_STATUS = #{friendStatus}
        <if test="keyword != null and keyword != ''">
            AND (u.USERNAME LIKE CONCAT('%', #{keyword}, '%') OR u.NAME LIKE CONCAT('%', #{keyword}, '%'))
        </if>
    </select>

    <!-- 추천 친구 목록 조회 -->
    <select id="getRecommendationFriendInfo" parameterType="long"
            resultType="com.planu.group_meeting.dto.FriendDto$FriendInfo">
        SELECT DISTINCT
        u.ID AS userId,
        u.NAME AS name,
        u.USERNAME AS username,
        u.PROFILE_IMG_URL AS profileImageUrl
        FROM USER u
        WHERE u.ID != #{userId}
        AND u.ID NOT IN (
        SELECT f.TO_USER_ID FROM FRIEND f WHERE f.FROM_USER_ID = #{userId} AND f.FRIEND_STATUS = 'FRIEND'
        UNION
        SELECT f.FROM_USER_ID FROM FRIEND f WHERE f.TO_USER_ID = #{userId} AND f.FRIEND_STATUS = 'FRIEND'
        )
        AND u.ID IN (
        -- 1. 친구의 친구가 3명 이상인 경우 추천
        SELECT f2.TO_USER_ID
        FROM FRIEND f1
        JOIN FRIEND f2 ON f1.TO_USER_ID = f2.FROM_USER_ID
        WHERE f1.FROM_USER_ID = #{userId}
        AND f2.TO_USER_ID != #{userId}
        AND f2.FRIEND_STATUS = 'FRIEND'
        GROUP BY f2.TO_USER_ID
        HAVING COUNT(f2.TO_USER_ID) >= 3

        UNION

        -- 2. 같은 그룹에 소속된 경우 추천
        SELECT gu2.USER_ID
        FROM GROUP_USER gu1
        JOIN GROUP_USER gu2 ON gu1.GROUP_ID = gu2.GROUP_ID
        WHERE gu1.USER_ID = #{userId}  -- 내가 속한 그룹
        AND gu2.USER_ID != #{userId}  -- 본인은 제외
        AND gu2.GROUP_STATE = 1  -- 그룹에서 탈퇴하지 않은 사용자만 추천
        )
    </select>

    <select id="findFriendOfUser" parameterType="Long" resultType="Long">
        SELECT TO_USER_ID
        FROM FRIEND
        WHERE FROM_USER_ID = #{userId} AND FRIEND_STATUS = 'FRIEND'
    </select>


</mapper>