<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.planu.group_meeting.dao.GroupDAO">
    <insert id="insertGroup" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO GROUP_ (NAME, PROFILE)
        VALUES (#{name}, #{groupImageUrl})
    </insert>

    <select id="findUserIdByUsername" resultType="java.lang.Long">
        SELECT id
        FROM USER
        WHERE username = #{username}
    </select>

    <insert id="insertGroupUser">
        INSERT INTO GROUP_USER (user_id, group_id, group_role, group_state, group_is_pin)
        VALUES (#{userId}, #{groupId}, #{groupRole}, #{groupState}, #{isPin})
    </insert>

    <select id="findGroupById" resultType="com.planu.group_meeting.entity.Group">
        SELECT
        ID,
        NAME,
        PROFILE AS groupImageUrl,
        CREATED_DATE AS createdDate,
        UPDATED_DATE AS updatedDate
        FROM GROUP_
        WHERE ID = #{groupId}
    </select>


    <select id="findGroupUserByUserIdAndGroupId" resultType="com.planu.group_meeting.entity.GroupUser">
        SELECT
        USER_ID AS userId,
        GROUP_ID AS groupId,
        GROUP_ROLE AS groupRole,
        GROUP_STATE AS groupState,
        GROUP_IS_PIN AS isPin,
        VERSION AS version,
        CREATED_DATE AS createdDate,
        UPDATED_DATE AS updatedDate
        FROM GROUP_USER
        WHERE USER_ID = #{userId} AND GROUP_ID = #{groupId}
    </select>

    <update id="updateGroupUserGroupStatus">
        UPDATE GROUP_USER
        SET GROUP_STATE = 1, UPDATED_DATE = CURRENT_TIMESTAMP
        WHERE USER_ID = #{userId} AND GROUP_ID = #{groupId}
    </update>

    <select id="findNameByGroupId" resultType="String">
        select name
        from GROUP_
        where id = #{groupId}
    </select>

    <select id="findGroupsByUserId" resultType="com.planu.group_meeting.dto.GroupResponseDTO">
        SELECT
        g.ID AS groupId,
        g.NAME AS groupName,
        g.PROFILE AS groupImageUrl,
        (SELECT COUNT(*)
        FROM GROUP_USER gu_sub
        WHERE gu_sub.GROUP_ID = g.ID
        AND gu_sub.GROUP_STATE = 1) AS participant,
        gu.GROUP_PIN AS groupPin,
        gu.GROUP_IS_PIN AS isPin  -- 그룹 고정 여부 추가
        FROM GROUP_ g
        LEFT JOIN GROUP_USER gu ON gu.GROUP_ID = g.ID AND gu.USER_ID = #{userId}  -- 현재 사용자의 GROUP_USER 정보 조회
        WHERE EXISTS (
        SELECT 1 FROM GROUP_USER gu_check
        WHERE gu_check.USER_ID = #{userId}
        AND gu_check.GROUP_ID = g.ID
        AND gu_check.GROUP_STATE = 1)
        ORDER BY
        CASE WHEN gu.GROUP_PIN IS NULL THEN 1 ELSE 0 END,  -- GROUP_PIN이 NULL이면 뒤로 정렬
        gu.GROUP_PIN DESC,  -- 최신 핀 우선 정렬
        g.NAME ASC;  -- 그룹명 알파벳순 정렬
    </select>



    <delete id="deleteGroupUserByUserIdAndGroupId">
        DELETE FROM GROUP_USER
        WHERE USER_ID = #{userId} AND GROUP_ID = #{groupId}
    </delete>

    <delete id="deleteGroupScheduleParticipant" parameterType="long">
        DELETE FROM GROUP_SCHEDULE_PARTICIPANT WHERE GROUP_ID = #{groupId}
    </delete>

    <delete id="deleteGroupScheduleComment" parameterType="long">
        DELETE FROM GROUP_SCHEDULE_COMMENT WHERE GROUP_ID = #{groupId}
    </delete>

    <delete id="deleteGroupUser" parameterType="long">
        DELETE FROM GROUP_USER WHERE GROUP_ID = #{groupId}
    </delete>

    <delete id="deleteChatMessage" parameterType="long">
        DELETE FROM CHAT_MESSAGE WHERE GROUP_ID = #{groupId}
    </delete>

    <delete id="deleteGroupSchedule" parameterType="long">
        DELETE FROM GROUP_SCHEDULE WHERE GROUP_ID = #{groupId}
    </delete>

    <delete id="deleteGroup" parameterType="long">
        DELETE FROM GROUP_ WHERE ID = #{groupId}
    </delete>


    <select id="getGroupInviteList" resultType="com.planu.group_meeting.dto.GroupResponseDTO">
        SELECT g.ID AS groupId,
        g.NAME AS groupName,
        g.PROFILE AS groupImageUrl
        FROM GROUP_USER gu
        JOIN GROUP_ g ON gu.GROUP_ID = g.ID
        WHERE gu.USER_ID = #{userId}
        AND (gu.GROUP_STATE = 0 OR gu.GROUP_STATE IS NULL)
    </select>

    <select id="findGroupMembers" resultType="com.planu.group_meeting.dto.GroupDTO$Member">
        SELECT
            u.name,
            u.username,
            u.profile_img_url as profileImage,
            g.group_role as groupRole
        FROM
            GROUP_USER as g
        JOIN
            USER as u ON g.user_id = u.id
        WHERE
            g.group_id = #{groupId}
            AND g.GROUP_STATE = 1
        <if test="keyword != null and keyword != ''">
            AND (u.username LIKE CONCAT('%', #{keyword}, '%') OR u.name LIKE CONCAT('%', #{keyword}, '%'))
        </if>
    </select>


    <select id="findUserIdsByGroupId" resultType="java.lang.Long">
        SELECT USER_ID
        FROM GROUP_USER
        WHERE GROUP_ID=#{groupId}
    </select>

    <update id="updateGroupPin">
        UPDATE GROUP_USER
        SET GROUP_PIN = NOW(), GROUP_IS_PIN = TRUE, VERSION = VERSION + 1
        WHERE USER_ID = #{userId} AND GROUP_ID = #{groupId} AND VERSION = #{version}
    </update>

    <update id="updateGroupUnpin">
        UPDATE GROUP_USER
        SET GROUP_PIN = NULL, GROUP_IS_PIN = FALSE, VERSION = VERSION + 1
        WHERE USER_ID = #{userId} AND GROUP_ID = #{groupId} AND VERSION = #{version}
    </update>

    <resultMap id="GroupUserDTOResultMap" type="com.planu.group_meeting.dto.GroupUserDTO">
        <id property="userId" column="USER_ID"/>
        <id property="groupId" column="GROUP_ID"/>
        <result property="groupRole" column="GROUP_ROLE"/>
        <result property="groupState" column="GROUP_STATE"/>
        <result property="pinTime" column="GROUP_PIN"/>
        <result property="isPin" column="GROUP_IS_PIN"/>
        <result property="version" column="VERSION"/>
        <result property="createdDate" column="CREATED_DATE"/>
        <result property="updatedDate" column="UPDATED_DATE"/>
    </resultMap>

    <select id="findGroupsByGroupId" resultMap="GroupUserDTOResultMap">
        SELECT USER_ID, GROUP_ID, GROUP_ROLE, GROUP_STATE, GROUP_PIN, GROUP_IS_PIN, VERSION, CREATED_DATE, UPDATED_DATE
        FROM GROUP_USER
        WHERE GROUP_ID = #{groupId}
    </select>
</mapper>
