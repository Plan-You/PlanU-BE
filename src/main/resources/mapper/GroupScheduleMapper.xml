<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.planu.group_meeting.dao.GroupScheduleDAO">
    <select id="findTodaySchedulesByToday"
            resultType="com.planu.group_meeting.dto.GroupScheduleDTO$todayScheduleResponse">
        SELECT id, title, date_format(start_datetime, '%p %hì‹œ') as startDateTime, location
        FROM GROUP_SCHEDULE
        WHERE group_id = #{groupId} and date (start_datetime) = date(#{today})
    </select>

    <select id="findScheduleOverViewsByRange"
            resultType="com.planu.group_meeting.dto.GroupScheduleDTO$scheduleOverViewResponse">
        SELECT
            id,
            title,
            location,
            DATE_FORMAT(start_datetime, '%Y-%m-%d %H:%i') as startTime,
            DATE_FORMAT(end_datetime, '%Y-%m-%d %H:%i') as endTime,
            color
        FROM GROUP_SCHEDULE
        WHERE group_id = #{groupId} and start_datetime >= #{startDate} and end_datetime >= #{startDate}
        ORDER BY date(start_datetime) ASC, datediff(end_datetime, start_datetime) desc;
    </select>

    <select id="existsScheduleByDate" resultType="boolean">
        SELECT EXISTS (
            SELECT 1
            FROM GROUP_SCHEDULE GS
            JOIN GROUP_SCHEDULE_PARTICIPANT GSP ON GS.ID = GSP.GROUP_SCHEDULE_ID
            WHERE GSP.USER_ID = #{userId} AND DATE(GS.START_DATETIME) = #{date}
        )
    </select>

   <select id="existsGroupScheduleByDate" resultType="boolean">
       SELECT EXISTS (
            SELECT 1
            FROM GROUP_SCHEDULE
            WHERE GROUP_ID = #{groupId} and DATE(START_DATETIME) = #{date}
       )
   </select>

    <insert id="insert" parameterType="com.planu.group_meeting.entity.GroupSchedule" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO GROUP_SCHEDULE(TITLE, START_DATETIME, END_DATETIME, COLOR, MEMO, LOCATION, LATITUDE, LONGITUDE, GROUP_ID )
        VALUES (#{title}, #{startDateTime}, #{endDateTime}, #{color}, #{memo}, #{location}, #{latitude}, #{longitude}, #{groupId})
    </insert>

    <select id="findByScheduleId" resultType="com.planu.group_meeting.dto.GroupScheduleDTO$GroupSchedulesDetailResponse">
        SELECT id as groupScheduleId,
               title,
               color,
               start_datetime as startDate,
               end_datetime as endDate,
               location,
               latitude,
               longitude,
               memo
        FROM GROUP_SCHEDULE
        WHERE group_id = #{groupId} and id = #{scheduleId};
    </select>

    <delete id="deleteGroupScheduleById" parameterType="Long">
        DELETE FROM GROUP_SCHEDULE WHERE group_id = #{groupId} and id = #{scheduleId};
    </delete>

    <select id="findById" resultType="com.planu.group_meeting.entity.GroupSchedule">
        SELECT
            id,
            group_id as groupId,
            title as title,
            start_datetime as startDateTime,
            end_datetime as endDateTime,
            color,
            schedule_visibility as visibility,
            memo,
            location,
            latitude,
            longitude,
            created_date as createdDate,
            updated_date as updatedDate
        FROM GROUP_SCHEDULE
        WHERE group_id = #{groupId} and id = #{scheduleId};
    </select>

    <update id="updateGroupSchedule" parameterType="com.planu.group_meeting.entity.GroupSchedule">
        UPDATE GROUP_SCHEDULE
        SET
            title = #{title},
            start_datetime = #{startDateTime},
            end_datetime = #{endDateTime},
            color = #{color},
            memo = #{memo},
            location = #{location},
            latitude = #{latitude},
            longitude = #{longitude}
        WHERE
            group_id = #{groupId} and id = #{id}
    </update>

    <select id="getGroupScheduleByYearMonth" resultType="com.planu.group_meeting.dto.GroupScheduleDTO$scheduleOverViewResponse">
        SELECT id, title, start_datetime as startTime, end_datetime as endTime, color
        FROM GROUP_SCHEDULE
        WHERE group_id = #{groupId} and start_datetime >= #{startDate} and #{endDate} >= end_datetime
        ORDER BY date(start_datetime) ASC, datediff(end_datetime, start_datetime) desc;
    </select>
</mapper>